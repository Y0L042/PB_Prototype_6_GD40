[gd_scene load_steps=6 format=3 uid="uid://db15mx0uooog4"]

[ext_resource type="Script" path="res://Actor/actor.gd" id="1_gq7sa"]

[sub_resource type="AnimationNodeStateMachine" id="AnimationNodeStateMachine_fqh25"]

[sub_resource type="AnimationNodeStateMachinePlayback" id="AnimationNodeStateMachinePlayback_fio7w"]

[sub_resource type="Shader" id="Shader_j5y8h"]
code = "shader_type canvas_item;

uniform vec4 color : source_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
		
		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_wqx3a"]
shader = SubResource("Shader_j5y8h")
shader_parameter/add_margins = null
shader_parameter/color = Color(1, 1, 1, 1)
shader_parameter/inside = true
shader_parameter/pattern = null
shader_parameter/width = 5.0

[node name="Actor" type="CharacterBody2D"]
collision_layer = 2
collision_mask = 3
script = ExtResource("1_gq7sa")

[node name="CollBody" type="CollisionShape2D" parent="."]

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
root_node = NodePath("../CollBody")

[node name="AnimationTree" type="AnimationTree" parent="AnimationPlayer"]
tree_root = SubResource("AnimationNodeStateMachine_fqh25")
anim_player = NodePath("..")
active = true
parameters/playback = SubResource("AnimationNodeStateMachinePlayback_fio7w")

[node name="Pivot" type="Marker2D" parent="."]

[node name="BodySprite" type="Sprite2D" parent="Pivot"]
unique_name_in_owner = true
material = SubResource("ShaderMaterial_wqx3a")

[node name="WeaponMarker" type="Marker2D" parent="Pivot"]
unique_name_in_owner = true

[node name="FOV_Area" type="Area2D" parent="Pivot"]
collision_layer = 0
collision_mask = 2
monitorable = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="Pivot/FOV_Area"]
